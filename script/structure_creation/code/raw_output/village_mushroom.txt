--------------FABRIC-------------

    public static StructureFeature<NoneFeatureConfiguration> VILLAGE_MUSHROOM = new GenericJigsawStructure.Builder<>(new ResourceLocation(RepurposedStructures.MODID, "villages/mushroom/town_center")).setStructureSize(8).build();

        FabricStructureBuilder.create(new ResourceLocation(RepurposedStructures.MODID, "village_mushroom"), VILLAGE_MUSHROOM).step(GenerationStep.Decoration.VILLAGES).defaultConfig(new StructureFeatureConfiguration(RepurposedStructures.RSAllConfig.RSVillagessConfig.villageMushroomAverageChunkDistance, (int) (RepurposedStructures.RSAllConfig.RSVillagessConfig.villageMushroomAverageChunkDistance * 0.5f), 1150624897)).superflatFeature(VILLAGE_MUSHROOM.configured(FeatureConfiguration.NONE)).adjustsSurface().register();

    public static ConfiguredStructureFeature<NoneFeatureConfiguration, ? extends StructureFeature<NoneFeatureConfiguration>> VILLAGE_MUSHROOM = RSStructures.VILLAGE_MUSHROOM.configured(FeatureConfiguration.NONE);

        Registry.register(registry, new ResourceLocation(RepurposedStructures.MODID, "village_mushroom"), VILLAGE_MUSHROOM);

        addTags(RSStructures.VILLAGE_MUSHROOM, Stream.of(STRUCTURE_TAGS.VILLAGE, STRUCTURE_TAGS.NO_LAKES).collect(Collectors.toSet()));

        GeneralUtils.addToBiome("VILLAGE_MUSHROOM",
                (context) -> 
						BiomeSelection.isBiomeAllowed(context, RSStructures.VILLAGE_MUSHROOM,
                                () -> )
						&& RepurposedStructures.RSAllConfig.RSVillagessConfig.villageMushroomAverageChunkDistance != 1001,
                context -> context.getGenerationSettings().addBuiltInStructure(RSConfiguredStructures.VILLAGE_MUSHROOM));
				

        @ConfigEntry.Gui.Tooltip(count = 0)
        @ConfigEntry.Gui.PrefixText
        @ConfigEntry.Gui.RequiresRestart
        @Comment("How rare are Mushroom Villages. 1 for spawning in most chunks and 10001 for none. ")
        @ConfigEntry.BoundedDiscrete(min = 1, max = 1001)
        public int villageMushroomAverageChunkDistance = 20;

--------------FORGE-------------

    public static final RegistryObject<Structure<NoFeatureConfig>> VILLAGE_MUSHROOM = addToStructureMaps("village_mushroom", () -> (new GenericJigsawStructure.Builder<>(new ResourceLocation(RepurposedStructures.MODID, "villages/mushroom/town_center")).setStructureSize(8).build()));


        addToTerraformingAndStructureMaps(new ResourceLocation(RepurposedStructures.MODID, "village_mushroom"), VILLAGE_MUSHROOM.get(), GenerationStage.Decoration.VILLAGES, new StructureSeparationSettings(RepurposedStructures.RSVillagessConfig.villageMushroomAverageChunkDistance.get(), (int) (RepurposedStructures.RSVillagessConfig.villageMushroomAverageChunkDistance.get() * 0.5f), 1150624897));

    public static StructureFeature<NoFeatureConfig, ? extends Structure<NoFeatureConfig>> VILLAGE_MUSHROOM = RSStructures.VILLAGE_MUSHROOM.get().configured(IFeatureConfig.NONE);

        Registry.register(registry, new ResourceLocation(RepurposedStructures.MODID, "village_mushroom"), VILLAGE_MUSHROOM);

        addTags(RSStructures.VILLAGE_MUSHROOM.get(), Stream.of(STRUCTURE_TAGS.VILLAGE, STRUCTURE_TAGS.NO_LAKES).collect(Collectors.toSet()));

        if (RepurposedStructures.RSVillagessConfig.maxChunkDistance.get() != 1001 &&
            BiomeSelection.isBiomeAllowed(event, RSStructures.VILLAGE_MUSHROOM.get(),
                    () -> ))
        {
            event.getGeneration().getStructures().add(() -> RSConfiguredStructures.VILLAGE_MUSHROOM);
        }

		public ConfigValueListener<Integer> villageMushroomAverageChunkDistance;

                villageMushroomAverageChunkDistance = subscriber.subscribe(builder
                    .comment(How rare are Mushroom Villages. 1 for spawning in most chunks and 10001 for none. )
                    .translation("repurposedstructures.config.VILLAGE_MUSHROOM.villagemushroomaveragechunkdistance")
                    .defineInRange("villageMushroomAverageChunkDistance", 20, 1, 1001));