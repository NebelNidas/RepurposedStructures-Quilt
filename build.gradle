plugins {
	id 'fabric-loom' version '0.4-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	maven { url 'https://jitpack.io' }
	maven { url 'http://server.bbkr.space:8081/artifactory/libs-release' }
	maven { url "https://maven.fabricmc.net" }
	maven {
		name = 'Earthcomputer Mods'
		url = 'https://dl.bintray.com/earthcomputer/mods'
	}
	flatDir {
		dirs 'deps'
	}
}

minecraft {
	accessWidener "src/main/resources/repurposed_structures.accesswidener"
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation "me.shedaniel.cloth:config-2:${project.cloth_config_version}"
	include "me.shedaniel.cloth:config-2:${project.cloth_config_version}"

	modImplementation "me.sargunvohra.mcmods:autoconfig1u:${project.auto_config_version}"
    include "me.sargunvohra.mcmods:autoconfig1u:${project.auto_config_version}"

	modImplementation "net.earthcomputer:libstructure:${project.libstructure_version}"
	include "net.earthcomputer:libstructure:${project.libstructure_version}"

    // not required, but we want to see our config screen
	modImplementation "io.github.prospector:modmenu:${project.mod_menu_version}"

	modCompile 'com.github.Draylar:angerable-patch:1.0.0'
	include 'com.github.Draylar:angerable-patch:1.0.0'

}

if (project.use_third_party_mods) {
	repositories {
		maven { url = "https://jitpack.io" }
	}

	dependencies {
	//	modRuntime "com.github.jellysquid3:lithium_fabric:1.16.1"
	//	modRuntime "com.github.jellysquid3:phosphor_fabric:1.16.1"
	//	modRuntime "com.github.jellysquid3:sodium_fabric:1.16.1"
	//	modRuntime "zabi.minecraft.nbttooltip:nbttooltip:1.0.4"
	//	modRuntime "com.github.voronoiaoc:byg:1.0.6"
	}
}


import groovy.json.JsonSlurper
import groovy.json.JsonOutput

processResources {
	inputs.property "version", project.version

	from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"
		expand "version": project.version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude "fabric.mod.json"
	}

	// Minifies all .json files when building the mod.
	// Source files are not minified, only the jar copies.
	doLast {

		def jsonMinifyStart = System.currentTimeMillis()
		def jsonMinified = 0
		def jsonBytesSaved = 0

		fileTree(dir: outputs.files.asPath, include: '**/*.json').each {

			File file = it
			jsonMinified++
			def oldLength = file.length()
			file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
			jsonBytesSaved += oldLength - file.length()
		}

		println('Minified ' + jsonMinified + ' json files. Saved ' + jsonBytesSaved + ' bytes. Took ' + (System.currentTimeMillis() - jsonMinifyStart) + 'ms.')
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

jar {
	from "LICENSE"
}